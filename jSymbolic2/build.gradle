plugins {
    id 'java'
    id 'application'
    id 'jvm-test-suite'
    id "org.sonarqube" version "4.4.1.3373"
    id 'me.champeau.jmh' version '0.6.8'
}

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.testng:testng:7.7.0'
    testImplementation 'junit:junit:4.13.2'
    implementation fileTree(dir: '../Third-Party-Jars', include: ['**/*.jar'])
    testImplementation fileTree(dir: '../Third-Party-Jars', include: ['**/*.jar'])
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.9.2'
    testImplementation 'org.openjdk.jmh:jmh-core:1.37'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    implementation 'org.openjdk.jmh:jmh-generator-bytecode:1.37'
    implementation 'org.openjdk.jmh:jmh-generator-reflection:1.37'
}

application {
    mainClassName = "jsymbolic2.Main"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    main.java.srcDirs = ['src']
    main.resources.srcDirs = []
    test.java.srcDirs = ['test/jsymbolic2/api', 'test/jsymbolic2/configuration',
                         'test/jsymbolic2/features', 'test/jsymbolic2/featureutils',
                         'test/jsymbolic2/processing']
    test.resources.srcDirs = []
    jmh {
        java.srcDirs = ['jmh/java']
        resources.srcDirs = ['jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveBaseName = 'jsymbolic2'

    manifest {
        attributes "Main-Class": "jsymbolic2.Main"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task runJar(type: JavaExec, dependsOn: ['jar']) {
    main = "-jar"
    args jar.archiveFile.get()
}

task benchmarkJar(type: Jar) {
    description 'Generates jar that starts Main from jmh.java'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveBaseName = 'jsymbolic2-benchmark'
    manifest {
        attributes 'Main-Class': 'jmh.Main'
    }

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } with jar
    from { sourceSets.jmh.output } with jar
}

task runBenchmarkJar(type: JavaExec, dependsOn: ['benchmarkJar']) {
    main = '-jar'
    benchmarkJar.archiveBaseName
    args 'build/libs/jsymbolic2-benchmark-' + version + '.jar'
}

test {
    ignoreFailures = true
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}